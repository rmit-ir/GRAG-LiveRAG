AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template to deploy Hugging Face LLM on EC2 using vLLM with Application Load Balancer'

Parameters:
  ModelId:
    Description: Hugging Face model ID to deploy
    Type: String
    Default: tiiuae/falcon-3-10b-instruct
  
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: g5.xlarge
    AllowedValues:
      - p5.48xlarge
      - p5e.48xlarge
      - p5en.48xlarge
      - p4d.24xlarge
      - p4de.24xlarge
      - g6e.xlarge
      - g6e.2xlarge
      - g6e.4xlarge
      - g6e.8xlarge
      - g6e.16xlarge
      - g6e.12xlarge
      - g6e.24xlarge
      - g6e.48xlarge
      - g5.xlarge
      - g5.2xlarge
      - g5.4xlarge
      - g5.8xlarge
      - g5.16xlarge
      - g5.12xlarge
      - g5.24xlarge
      - g5.48xlarge
    ConstraintDescription: Must be a valid GPU instance type

  VLLMPort:
    Description: Port for vLLM API
    Type: Number
    Default: 8000
    MinValue: 1024
    MaxValue: 65535

  ApiKey:
    Description: API Key for vLLM (will be set as EC2_LLM_API_KEY)
    Type: String
    NoEcho: true
    
  AmiId:
    Description: AMI ID to use for the EC2 instance (Deep Learning OSS Nvidia Driver AMI GPU PyTorch 2.6 Ubuntu 22.04)
    Type: String
    Default: ami-04f4302ff68e424cf
    
    
  StageName:
    Description: Stage name for API Gateway deployment
    Type: String
    Default: prod

Resources:
  # VPC for the EC2 instance
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-vpc"

  # Internet Gateway for the VPC
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-igw"

  # Attach Internet Gateway to VPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Public Subnet 1 for NAT Gateway
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-public-subnet-1"
          
  # Public Subnet 2 for ALB (in a different AZ)
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [1, !GetAZs ""]
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-public-subnet-2"

  # Private Subnet for EC2 instance
  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-private-subnet"

  # Route Table for Public Subnets
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-public-rt"

  # Route to Internet Gateway
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Associate Public Route Table with Public Subnet 1
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
      
  # Associate Public Route Table with Public Subnet 2
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # NAT Gateway EIP
  NatGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  # NAT Gateway
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-nat-gateway"

  # Route Table for Private Subnet
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-private-rt"

  # Route to NAT Gateway
  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  # Associate Private Route Table with Private Subnet
  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable

  # Security Group for EC2 instance
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for LLM EC2 instance
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref VLLMPort
          ToPort: !Ref VLLMPort
          SourceSecurityGroupId: !Ref ALBSecurityGroup
          Description: vLLM API access from ALB
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref ALBSecurityGroup
          Description: Log server access from ALB

  # IAM Role for EC2 with SSM permissions
  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Path: /

  # Instance Profile for EC2
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref EC2InstanceRole

  # EC2 Instance
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      SecurityGroupIds:
        - !GetAtt EC2SecurityGroup.GroupId
      ImageId: !Ref AmiId
      SubnetId: !Ref PrivateSubnet
      IamInstanceProfile: !Ref EC2InstanceProfile
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 100
            VolumeType: gp3
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
                    
          # Install VLLM and dependencies directly with pip3
          pip3 install vllm torch==2.1.0 transformers==4.37.0 accelerate==0.25.0 flask gunicorn
          
          # Create vllm log directory
          mkdir -p /home/ubuntu/vllm_logs
          chmod 755 /home/ubuntu/vllm_logs
          
          # Create and run the entrypoint script with log output
          cat > /home/ubuntu/run_vllm.sh << EOL
          #!/bin/bash
          # Run vLLM server with specified model and log output
          python3 -m vllm.entrypoints.api_server \
            --model ${ModelId} \
            --host 0.0.0.0 \
            --port ${VLLMPort} \
            --api-key "${ApiKey}" \
            2>&1 | tee -a /home/ubuntu/vllm_logs/vllm.log
          EOL
          
          chmod +x /home/ubuntu/run_vllm.sh
          
          # Set up systemd service for vLLM
          cat > /etc/systemd/system/vllm.service << EOL
          [Unit]
          Description=vLLM API Server
          After=network.target
          
          [Service]
          User=ubuntu
          WorkingDirectory=/home/ubuntu
          ExecStart=/home/ubuntu/run_vllm.sh
          Restart=always
          Environment=EC2_LLM_API_KEY="${ApiKey}"
          Environment=MODEL_ID=${ModelId}
          StandardOutput=append:/home/ubuntu/vllm_logs/vllm.log
          StandardError=append:/home/ubuntu/vllm_logs/vllm.log
          
          [Install]
          WantedBy=multi-user.target
          EOL
          
          # Create a simple Flask app to serve vllm logs
          cat > /home/ubuntu/log_server.py << EOL
          from flask import Flask, jsonify, request, Response
          import os
          
          app = Flask(__name__)
          
          @app.route('/vllm_log', methods=['GET'])
          def get_logs():
              try:
                  log_file = '/home/ubuntu/vllm_logs/vllm.log'
                  if not os.path.exists(log_file):
                      return jsonify({"error": "Log file not found"}), 404
                  
                  # Get the last n lines (default 100)
                  n = request.args.get('lines', default=100, type=int)
                  
                  with open(log_file, 'r') as f:
                      lines = f.readlines()
                      last_n_lines = lines[-n:] if n < len(lines) else lines
                  
                  return Response(''.join(last_n_lines), mimetype='text/plain')
              except Exception as e:
                  return jsonify({"error": str(e)}), 500
          
          @app.route('/health', methods=['GET'])
          def health_check():
              return jsonify({"status": "healthy"}), 200
          
          if __name__ == '__main__':
              app.run(host='0.0.0.0', port=8080)
          EOL
          
          # Create systemd service for the log server
          cat > /etc/systemd/system/vllm-log-server.service << EOL
          [Unit]
          Description=vLLM Log Server
          After=network.target vllm.service
          
          [Service]
          User=ubuntu
          WorkingDirectory=/home/ubuntu
          ExecStart=/usr/bin/gunicorn --bind 0.0.0.0:8080 --workers 2 log_server:app
          Restart=always
          
          [Install]
          WantedBy=multi-user.target
          EOL
          
          # Enable and start the services
          systemctl daemon-reload
          systemctl enable vllm
          systemctl start vllm
          systemctl enable vllm-log-server
          systemctl start vllm-log-server
          
          # Signal CloudFormation that the instance is ready
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EC2Instance --region ${AWS::Region}

      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-llm-instance"

  # Security Group for ALB
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Application Load Balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: HTTP access from anywhere
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS access from anywhere

  # Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${AWS::StackName}-alb"
      Type: application
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-alb"

  # Target Group for vLLM API
  VLLMTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${AWS::StackName}-vllm-tg"
      Port: !Ref VLLMPort
      Protocol: HTTP
      ProtocolVersion: HTTP1
      VpcId: !Ref VPC
      TargetType: instance
      Targets:
        - Id: !Ref EC2Instance
          Port: !Ref VLLMPort
      HealthCheckEnabled: true
      HealthCheckPath: /v1/health
      HealthCheckPort: !Ref VLLMPort
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3

  # Target Group for Log Server
  LogServerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${AWS::StackName}-log-tg"
      Port: 8080
      Protocol: HTTP
      ProtocolVersion: HTTP1
      VpcId: !Ref VPC
      TargetType: instance
      Targets:
        - Id: !Ref EC2Instance
          Port: 8080
      HealthCheckEnabled: true
      HealthCheckPath: /health
      HealthCheckPort: 8080
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3

  # HTTP Listener for ALB
  ALBHTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref VLLMTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  # vLLM API Listener Rule
  VLLMListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref VLLMTargetGroup
      Conditions:
        - Field: path-pattern
          Values:
            - /v1*
      ListenerArn: !Ref ALBHTTPListener
      Priority: 10

  # Log Server Listener Rule
  LogServerListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref LogServerTargetGroup
      Conditions:
        - Field: path-pattern
          Values:
            - /vllm_log*
            - /health
      ListenerArn: !Ref ALBHTTPListener
      Priority: 20

Outputs:
  InstanceId:
    Description: ID of the EC2 instance
    Value: !Ref EC2Instance
  
  ALBEndpoint:
    Description: URL for the Application Load Balancer endpoint
    Value: !Sub "http://${ApplicationLoadBalancer.DNSName}"
  
  VLLMApiEndpoint:
    Description: URL for the vLLM API through ALB
    Value: !Sub "http://${ApplicationLoadBalancer.DNSName}/v1"
  
  VLLMLogEndpoint:
    Description: URL for the vLLM logs through ALB
    Value: !Sub "http://${ApplicationLoadBalancer.DNSName}/vllm_log"
  
  ModelId:
    Description: Deployed model ID
    Value: !Ref ModelId
